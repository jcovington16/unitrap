import { camelize, } from "../helpers/utils.js";
import { hoistApiError } from "./errors.js";
import { getFetcher, } from "./client/index.js";
function assertResponse(obj) {
    return (obj.external_url != null &&
        obj.image != null &&
        obj.name != null &&
        obj.schema != null &&
        obj.schema.columns != null);
}
function transformResponse(obj) {
    if (assertResponse(obj)) {
        const { attributes: _, ...base } = camelize(obj);
        return { ...base, attributes: obj.attributes?.map(camelize) };
    }
    /* c8 ignore next 2 */
    throw new Error("malformed table repsonse");
}
export async function getTable(config, params, opts = {}) {
    const getTableById = getFetcher(config)
        .path("/tables/{chainId}/{tableId}")
        .method("get")
        .create();
    const { data } = await getTableById(params, opts).catch(hoistApiError);
    const transformed = transformResponse(data);
    return transformed;
}
//# sourceMappingURL=tables.js.map