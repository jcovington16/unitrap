import { camelize } from "../helpers/utils.js";
import { getFetcher, } from "./client/index.js";
import { hoistApiError } from "./errors.js";
function assertResponse(obj) {
    return Object.values(obj).every((v) => v != null);
}
function transformResponse(obj) {
    if (assertResponse(obj)) {
        return camelize(obj);
    }
    /* c8 ignore next 2 */
    throw new Error("malformed version repsonse");
}
export async function getVersion(config, opts = {}) {
    const version = getFetcher(config).path("/version").method("get").create();
    const { data } = await version({}, opts).catch(hoistApiError);
    const transformed = transformResponse(data);
    return transformed;
}
//# sourceMappingURL=version.js.map