export type Awaitable<T> = T | PromiseLike<T>;
export interface Signal {
    signal?: AbortSignal;
}
export interface Interval {
    interval?: number;
}
export type SignalAndInterval = Signal & Interval;
export interface Wait<T = unknown> {
    wait: (opts?: SignalAndInterval) => Promise<T>;
}
export interface AsyncData<T> {
    done: boolean;
    data?: T;
}
export type AsyncFunction<T> = () => Awaitable<AsyncData<T>>;
export declare function getAbortSignal(signal?: AbortSignal, maxTimeout?: number): {
    signal: AbortSignal;
    timeoutId: ReturnType<typeof setTimeout> | undefined;
};
export declare function getAsyncPoller<T = unknown>(fn: AsyncFunction<T>, interval?: number, signal?: AbortSignal): Promise<T>;
//# sourceMappingURL=await.d.ts.map