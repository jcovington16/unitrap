import { getBaseUrl } from "./chains.js";
import { getSigner } from "./ethers.js";
export async function checkWait(config, receipt) {
    if (config.autoWait ?? false) {
        const waited = await receipt.wait();
        return { ...receipt, ...waited };
    }
    return receipt;
}
export async function extractBaseUrl(conn = {}, chainNameOrId) {
    if (conn.baseUrl == null) {
        if (conn.signer == null) {
            if (chainNameOrId == null) {
                throw new Error("missing connection information: baseUrl, signer, or chainId required");
            }
            return getBaseUrl(chainNameOrId);
        }
        const chainId = await conn.signer.getChainId();
        return getBaseUrl(chainId);
    }
    return conn.baseUrl;
}
export async function extractSigner(conn = {}, external) {
    if (conn.signer == null) {
        return await getSigner(external);
    }
    return conn.signer;
}
export async function extractChainId(conn = {}) {
    const signer = await extractSigner(conn);
    const chainId = await signer.getChainId();
    if (chainId === 0 || isNaN(chainId) || chainId == null) {
        /* c8 ignore next 4 */
        throw new Error("cannot find chainId: is your signer connected to a network?");
    }
    return chainId;
}
const findOrCreateFile = async function (filepath) {
    const fs = await getFsModule();
    if (!fs.existsSync(filepath)) {
        fs.writeFileSync(filepath, JSON.stringify({}));
    }
    return fs.readFileSync(filepath);
};
// TODO: next major we should remove the jsonFileAliases helper and expose it
//    in a different package since it doesn't work in the browser.
const getFsModule = (function () {
    let fs;
    return async function () {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (fs)
            return fs;
        fs = await import(/* webpackIgnore: true */ "fs");
        return fs;
    };
})();
export function jsonFileAliases(filepath) {
    return {
        read: async function () {
            const jsonBuf = await findOrCreateFile(filepath);
            return JSON.parse(jsonBuf.toString());
        },
        write: async function (nameMap) {
            const fs = await getFsModule();
            fs.writeFileSync(filepath, JSON.stringify(nameMap));
        },
    };
}
export function prepReadConfig(config) {
    const conf = {};
    if (config.apiKey) {
        conf.init = {
            headers: {
                "Api-Key": config.apiKey,
            },
        };
    }
    return { ...config, ...conf };
}
//# sourceMappingURL=config.js.map