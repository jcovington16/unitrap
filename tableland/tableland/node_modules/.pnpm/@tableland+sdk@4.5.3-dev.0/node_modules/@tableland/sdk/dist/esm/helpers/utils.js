export function getRange(size, startAt = 0) {
    return [...Array(size).keys()].map((i) => i + startAt);
}
export const getDelay = async (ms) => await new Promise((resolve) => setTimeout(resolve, ms));
export function camelCase(str) {
    return str.replace(/[_.-](\w|$)/g, function (_, x) {
        return x.toUpperCase();
    });
}
function walk(obj) {
    if (obj == null || typeof obj !== "object")
        return obj;
    if (obj instanceof Date || obj instanceof RegExp)
        return obj;
    if (Array.isArray(obj))
        return obj.map(walk);
    return Object.keys(obj).reduce((res, key) => {
        const camel = camelCase(key);
        res[camel] = walk(obj[key]);
        return res;
    }, {});
}
export function camelize(obj) {
    return typeof obj === "string" ? camelCase(obj) : walk(obj);
}
//# sourceMappingURL=utils.js.map