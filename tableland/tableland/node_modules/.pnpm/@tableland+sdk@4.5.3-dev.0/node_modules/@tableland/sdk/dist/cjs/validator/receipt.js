"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pollTransactionReceipt = exports.getTransactionReceipt = void 0;
const utils_js_1 = require("../helpers/utils.js");
const await_js_1 = require("../helpers/await.js");
const errors_js_1 = require("./errors.js");
const index_js_1 = require("./client/index.js");
function assertResponse(obj) {
    return (obj.block_number != null &&
        obj.chain_id != null &&
        obj.transaction_hash != null &&
        /* c8 ignore next */
        (obj.table_id != null || obj.error != null || obj.error_event_idx != null));
}
function transformResponse(obj) {
    if (assertResponse(obj)) {
        return (0, utils_js_1.camelize)(obj);
    }
    /* c8 ignore next 2 */
    throw new Error("malformed transaction receipt response");
}
async function getTransactionReceipt(config, params, opts = {}) {
    const receiptByTransactionHash = (0, index_js_1.getFetcher)(config)
        .path("/receipt/{chainId}/{transactionHash}")
        .method("get")
        .create();
    const { data } = await receiptByTransactionHash(params, opts).catch(errors_js_1.hoistApiError);
    const transformed = transformResponse(data);
    return transformed;
}
exports.getTransactionReceipt = getTransactionReceipt;
async function pollTransactionReceipt(config, params, { signal, interval } = {}) {
    const receiptByTransactionHash = (0, index_js_1.getFetcher)(config)
        .path("/receipt/{chainId}/{transactionHash}")
        .method("get")
        .create();
    const fn = async () => {
        try {
            const { data: obj } = await receiptByTransactionHash(params, {
                signal,
            }).catch(errors_js_1.hoistApiError);
            const data = transformResponse(obj);
            return { done: true, data };
        }
        catch (err) {
            if (err instanceof index_js_1.ApiError && err.status === 404) {
                return { done: false };
            }
            /* c8 ignore next */
            throw err;
        }
    };
    const receipt = await (0, await_js_1.getAsyncPoller)(fn, interval, signal);
    return receipt;
}
exports.pollTransactionReceipt = pollTransactionReceipt;
//# sourceMappingURL=receipt.js.map