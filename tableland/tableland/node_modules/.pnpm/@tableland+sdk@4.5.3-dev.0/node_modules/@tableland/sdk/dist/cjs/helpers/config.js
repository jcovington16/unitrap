"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepReadConfig = exports.jsonFileAliases = exports.extractChainId = exports.extractSigner = exports.extractBaseUrl = exports.checkWait = void 0;
const chains_js_1 = require("./chains.js");
const ethers_js_1 = require("./ethers.js");
async function checkWait(config, receipt) {
    if (config.autoWait ?? false) {
        const waited = await receipt.wait();
        return { ...receipt, ...waited };
    }
    return receipt;
}
exports.checkWait = checkWait;
async function extractBaseUrl(conn = {}, chainNameOrId) {
    if (conn.baseUrl == null) {
        if (conn.signer == null) {
            if (chainNameOrId == null) {
                throw new Error("missing connection information: baseUrl, signer, or chainId required");
            }
            return (0, chains_js_1.getBaseUrl)(chainNameOrId);
        }
        const chainId = await conn.signer.getChainId();
        return (0, chains_js_1.getBaseUrl)(chainId);
    }
    return conn.baseUrl;
}
exports.extractBaseUrl = extractBaseUrl;
async function extractSigner(conn = {}, external) {
    if (conn.signer == null) {
        return await (0, ethers_js_1.getSigner)(external);
    }
    return conn.signer;
}
exports.extractSigner = extractSigner;
async function extractChainId(conn = {}) {
    const signer = await extractSigner(conn);
    const chainId = await signer.getChainId();
    if (chainId === 0 || isNaN(chainId) || chainId == null) {
        /* c8 ignore next 4 */
        throw new Error("cannot find chainId: is your signer connected to a network?");
    }
    return chainId;
}
exports.extractChainId = extractChainId;
const findOrCreateFile = async function (filepath) {
    const fs = await getFsModule();
    if (!fs.existsSync(filepath)) {
        fs.writeFileSync(filepath, JSON.stringify({}));
    }
    return fs.readFileSync(filepath);
};
// TODO: next major we should remove the jsonFileAliases helper and expose it
//    in a different package since it doesn't work in the browser.
const getFsModule = (function () {
    let fs;
    return async function () {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (fs)
            return fs;
        fs = await Promise.resolve().then(() => __importStar(require(/* webpackIgnore: true */ "fs")));
        return fs;
    };
})();
function jsonFileAliases(filepath) {
    return {
        read: async function () {
            const jsonBuf = await findOrCreateFile(filepath);
            return JSON.parse(jsonBuf.toString());
        },
        write: async function (nameMap) {
            const fs = await getFsModule();
            fs.writeFileSync(filepath, JSON.stringify(nameMap));
        },
    };
}
exports.jsonFileAliases = jsonFileAliases;
function prepReadConfig(config) {
    const conf = {};
    if (config.apiKey) {
        conf.init = {
            headers: {
                "Api-Key": config.apiKey,
            },
        };
    }
    return { ...config, ...conf };
}
exports.prepReadConfig = prepReadConfig;
//# sourceMappingURL=config.js.map