import { type Camelize, type PartialRequired } from "../helpers/utils.js";
import { type Signal, type SignalAndInterval } from "../helpers/await.js";
import { type Components, type FetchConfig, type Paths } from "./client/index.js";
export type Params = Paths["/receipt/{chainId}/{transactionHash}"]["get"]["parameters"]["path"];
type Response = Components["schemas"]["TransactionReceipt"];
type AssertedResponse = PartialRequired<Response, "error_event_idx" | "error">;
export type TransactionReceipt = Camelize<AssertedResponse>;
export declare function getTransactionReceipt(config: FetchConfig, params: Params, opts?: Signal): Promise<TransactionReceipt>;
export declare function pollTransactionReceipt(config: FetchConfig, params: Params, { signal, interval }?: SignalAndInterval): Promise<TransactionReceipt>;
export {};
//# sourceMappingURL=receipt.d.ts.map