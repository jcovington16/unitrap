import { type WaitableTransactionReceipt } from "../registry/utils.js";
import { type FetchConfig } from "../validator/client/index.js";
import { type ChainName } from "./chains.js";
import { type Signer, type ExternalProvider } from "./ethers.js";
export interface ReadConfig {
    baseUrl: string;
    aliases?: AliasesNameMap;
    apiKey?: string;
}
export interface SignerConfig {
    signer: Signer;
}
export interface AutoWaitConfig {
    autoWait: boolean;
}
export type Config = Partial<ReadConfig & SignerConfig>;
export type NameMapping = Record<string, string>;
export interface AliasesNameMap {
    read: () => Promise<NameMapping>;
    write: (map: NameMapping) => Promise<void>;
}
export declare function checkWait(config: Config & Partial<AutoWaitConfig>, receipt: WaitableTransactionReceipt): Promise<WaitableTransactionReceipt>;
export declare function extractBaseUrl(conn?: Config, chainNameOrId?: ChainName | number): Promise<string>;
export declare function extractSigner(conn?: Config, external?: ExternalProvider): Promise<Signer>;
export declare function extractChainId(conn?: Config): Promise<number>;
export declare function jsonFileAliases(filepath: string): AliasesNameMap;
export declare function prepReadConfig(config: Partial<ReadConfig>): FetchConfig;
//# sourceMappingURL=config.d.ts.map