import { type SignerConfig } from "../helpers/config.js";
import { type ContractTransaction } from "../helpers/ethers.js";
export interface PrepareParams {
    /**
     * SQL statement string.
     */
    statement: string;
    /**
     * The target chain id.
     */
    chainId: number;
    /**
     * The first table name in a series of SQL statements.
     */
    first?: string;
}
export declare function prepareCreateOne({ statement, chainId, first, }: PrepareParams): Promise<CreateOneParams & {
    prefix: string;
}>;
/**
 * CreateOneParams Represents the parameters Object used to create a single table.
 * @typedef {Object} CreateOneParams
 * @property {string} statement - SQL statement string.
 * @property {number} chainId - The target chain id.
 */
export interface CreateOneParams {
    statement: string;
    chainId: number;
}
/**
 * CreateManyParams Represents the parameters Object used to create multiple tables in a single tx.
 * @typedef {Object} CreateManyParams
 * @property {string[]} statements - List of create SQL statement strings.
 * @property {number} chainId - The target chain id.
 */
export interface CreateManyParams {
    statements: string[];
    chainId: number;
}
export type CreateParams = CreateOneParams | CreateManyParams;
/**
 * @custom deprecated This be removed in the next major version.
 * Use `create`.
 */
export declare function createTable(config: SignerConfig, params: CreateOneParams): Promise<ContractTransaction>;
export declare function create(config: SignerConfig, params: CreateParams): Promise<ContractTransaction>;
//# sourceMappingURL=create.d.ts.map