export type PartialRequired<T, S extends keyof T> = Omit<Required<T>, S> & Partial<Pick<T, S>>;
export declare function getRange(size: number, startAt?: number): readonly number[];
export declare const getDelay: (ms: number) => Promise<void>;
type CamelCase<S extends string> = S extends `${infer P1}_${infer P2}${infer P3}` ? `${P1}${Uppercase<P2>}${CamelCase<P3>}` : S;
export type Camelize<T> = {
    [K in keyof T as CamelCase<string & K>]: T[K] extends Array<infer U> ? U extends Record<string, unknown> | undefined ? Array<Camelize<U>> : T[K] : T[K] extends Record<string, unknown> | undefined ? Camelize<T[K]> : T[K];
};
export declare function camelCase(str: string): string;
export declare function camelize<T>(obj: T): T extends string ? string : Camelize<T>;
export {};
//# sourceMappingURL=utils.d.ts.map