"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrideDefaults = exports.getBaseUrl = exports.getChainId = exports.getContractAddress = exports.isTestnet = exports.getChainInfo = exports.supportedChains = void 0;
const network_js_1 = require("@tableland/evm/network.js");
// We simply pull this automatically from @tableland/evm to avoid keeping track seperately here.
const entries = Object.entries(network_js_1.proxies);
const mapped = entries.map(([chainName, contractAddress]) => {
    const uri = new URL(network_js_1.baseURIs[chainName]);
    const baseUrl = `${uri.protocol}//${uri.host}/api/v1`;
    const chainId = parseInt(uri.pathname
        .split("/")
        .filter((v) => v !== "")
        .pop() /* c8 ignore next */ ?? "");
    const entry = [
        chainName,
        { chainName, chainId, contractAddress, baseUrl },
    ];
    return entry;
});
/**
 * The set of chains and their information as supported by the Tableland network.
 */
exports.supportedChains = Object.fromEntries(mapped);
// Not exported
const supportedChainsById = Object.fromEntries(Object.values(exports.supportedChains).map((v) => [v.chainId, v]));
/**
 * Get the default chain information for a given chain name.
 * @param chainNameOrId The requested chain name.
 * @returns An object containing the default chainId, contractAddress, chainName, and baseUrl for the given chain.
 */
function getChainInfo(chainNameOrId) {
    const chainInfo = typeof chainNameOrId === "number"
        ? supportedChainsById[chainNameOrId]
        : exports.supportedChains[chainNameOrId];
    /* c8 ignore next 3 */
    if (chainInfo == null) {
        throw new Error(`cannot use unsupported chain: ${chainNameOrId}`);
    }
    return chainInfo;
}
exports.getChainInfo = getChainInfo;
function isTestnet(chainNameOrId) {
    const includesTestnet = getChainInfo(chainNameOrId).baseUrl.includes("testnet");
    return (includesTestnet ||
        chainNameOrId === "localhost" ||
        chainNameOrId === "local-tableland" ||
        chainNameOrId === 31337);
}
exports.isTestnet = isTestnet;
/**
 * Get the default contract address for a given chain name.
 * @param chainNameOrId The requested chain name.
 * @returns A hex string representing the default address for the Tableland registry contract.
 */
function getContractAddress(chainNameOrId) {
    return getChainInfo(chainNameOrId).contractAddress;
}
exports.getContractAddress = getContractAddress;
/**
 * Get the default chain id for a given chain name.
 * @param chainNameOrId The requested chain name.
 * @returns A number representing the default chain id of the requested chain.
 */
function getChainId(chainNameOrId) {
    return getChainInfo(chainNameOrId).chainId;
}
exports.getChainId = getChainId;
/**
 * Get the default host uri for a given chain name.
 * @param chainNameOrId The requested chain name.
 * @returns A string representing the default host uri for a given chain.
 */
function getBaseUrl(chainNameOrId) {
    return getChainInfo(chainNameOrId).baseUrl;
}
exports.getBaseUrl = getBaseUrl;
/**
 * Override the internal list of registry addresses and validator urls that will be used for Contract calls and read queries
 * @param chainNameOrId Either the chain name or chainId.  For a list of chain names see the evm-tableland networks file
 * @param values The values you would like to use to override the defaults.
 *  Example: {contractAddress: "0x000deadbeef", baseUrl: "https://my.validator.mydomain.tld"}
 * @returns void
 */
// TODO: It seems important to add this to the docs somewhere since it's the key
//    to using the SDK for the non-default Validator
function overrideDefaults(chainNameOrId, values) {
    if (values == null || typeof values !== "object") {
        throw new Error("override values must be an Object");
    }
    for (const [key, value] of Object.entries(values)) {
        if (typeof chainNameOrId === "number") {
            const found = getChainInfo(chainNameOrId);
            found[key] = value;
            exports.supportedChains[found.chainName][key] = value;
        }
        else {
            const found = getChainInfo(chainNameOrId);
            found[key] = value;
            supportedChainsById[found.chainId][key] = value;
        }
    }
}
exports.overrideDefaults = overrideDefaults;
//# sourceMappingURL=chains.js.map