import { type SignerConfig } from "../helpers/config.js";
import { type ContractTransaction } from "../helpers/ethers.js";
import { type TableIdentifier } from "./contract.js";
export interface PrepareParams {
    /**
     * SQL statement string.
     */
    statement: string;
    /**
     * The target chain id.
     */
    chainId: number;
    /**
     * The first table name in a series of SQL statements.
     */
    first: string;
}
export declare function prepareMutateOne({ statement, chainId, first, }: PrepareParams): Promise<RunSQLParams & {
    prefix: string;
}>;
/**
 * @custom:deprecated This type will change in the next major version.
 * Use the `MutateOneParams` type.
 */
export interface RunSQLParams extends TableIdentifier {
    /**
     * SQL statement string.
     */
    statement: string;
}
export interface MutateOneParams extends TableIdentifier {
    /**
     * SQL statement string.
     */
    statement: string;
}
/**
 * Runnable represents an Object the will be used as a Runnable struct in the
 * call to the contract's `mutate` function.
 * @typedef {Object} Runnable
 * @property {string} statement - SQL statement string.
 * @property {number} chainId - The target chain id.
 */
export interface Runnable {
    statement: string;
    tableId: number;
}
/**
 * MutateManyParams Represents the parameters Object used to mutate multiple tables in a single tx.
 * @typedef {Object} MutateManyParams
 * @property {Runnable[]} runnables - List of Runnables.
 * @property {number} chainId - The target chain id.
 */
export interface MutateManyParams {
    runnables: Runnable[];
    chainId: number;
}
export type MutateParams = MutateOneParams | MutateManyParams;
export declare function mutate(config: SignerConfig, params: MutateParams): Promise<ContractTransaction>;
//# sourceMappingURL=run.d.ts.map