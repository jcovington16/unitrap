import { TablelandTables__factory as Factory, } from "@tableland/evm";
import { getOverrides } from "../helpers/ethers.js";
import { validateTableName } from "../helpers/parser.js";
import { getContractAddress } from "../helpers/chains.js";
const connect = Factory.connect;
export async function getTableIdentifier(tableName) {
    const { tableId, chainId } = typeof tableName === "string"
        ? await validateTableName(tableName)
        : tableName;
    return { tableId: tableId.toString(), chainId };
}
export async function getContractAndOverrides(signer, chainId) {
    const address = getContractAddress(chainId);
    signer._checkProvider();
    const contract = connect(address, signer);
    const overrides = await getOverrides({ signer });
    return { contract, overrides };
}
export function assertChainId(actual, expected) {
    if (actual !== expected && expected != null) {
        throw new Error(`chain id mismatch: received ${actual}, expected ${expected}`);
    }
    return actual;
}
export async function getContractSetup(signer, tableName) {
    const { chainId: chain, tableId } = await getTableIdentifier(tableName);
    const chainId = await signer.getChainId();
    assertChainId(chainId, chain);
    const { contract, overrides } = await getContractAndOverrides(signer, chainId);
    return { contract, overrides, tableId };
}
//# sourceMappingURL=contract.js.map