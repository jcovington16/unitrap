import { type Camelize, type PartialRequired } from "../helpers/utils.js";
import { type Signal } from "../helpers/await.js";
import { type Components, type FetchConfig, type Paths } from "./client/index.js";
export type Params = Paths["/tables/{chainId}/{tableId}"]["get"]["parameters"]["path"];
export type Column = Components["schemas"]["Column"];
type BaseSchema = Components["schemas"]["Schema"];
export interface Schema extends Camelize<BaseSchema> {
    readonly columns: Array<PartialRequired<Column, "constraints">>;
}
type Response = Components["schemas"]["Table"];
interface AssertedResponse extends PartialRequired<Response, "animation_url" | "attributes"> {
    attributes?: Array<Record<string, any>>;
    schema: Schema;
}
export interface Table extends Camelize<AssertedResponse> {
    attributes?: Array<Camelize<Record<string, any>>>;
}
export declare function getTable(config: FetchConfig, params: Params, opts?: Signal): Promise<Table>;
export {};
//# sourceMappingURL=tables.d.ts.map